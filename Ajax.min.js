"use strict";var Ajax={};Ajax.Utils={extend:function(){var b,a={};for(var c in arguments){b=arguments[c];for(var d in b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d])}return a}},Ajax.call=function(a){var b=new Ajax.Methods(a);b.createRequest(),b.bindEvents(),b.req.send(b.opt.data)},Ajax.Methods=function(a){return a.url?(this.opt=Ajax.Utils.extend(this.defaultOptions,a),this):!1},Ajax.Methods.prototype.defaultOptions={method:"GET",data:null,complete:function(){},fail:function(){}},Ajax.Methods.prototype.bindEvents=function(){this.req.onload=this.loadListener.bind(this),this.req.onerror=this.errorListener.bind(this)},Ajax.Methods.prototype.createRequest=function(){this.req=new XMLHttpRequest,this.req.open(this.opt.method,this.opt.url,!0),setHeaders()},Ajax.Methods.prototype.setHeaders=function(){for(var a in this.opt.headers)this.req.setRequestHeader(a,this.opt[a])},Ajax.Methods.prototype.loadListener=function(){if(this.req.status>=200&&this.req.status<400){var a;try{a=JSON.parse(this.req.responseText)}catch(b){a=this.req.responseText}this.opt.complete(a)}},Ajax.Methods.prototype.errorListener=function(){this.opt.fail(this.req)};